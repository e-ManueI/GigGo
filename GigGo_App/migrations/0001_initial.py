# Generated by Django 4.1.7 on 2023-04-01 11:32

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('dayworkers', 'Day Workers'), ('streetvendors', 'Computer/IT'), ('cleaning/laundry', 'Cleaning/Laundry'), ('homeappliancerepair', 'Home Appliance Repair'), ('machineryrepair', 'Machinery Repair')], max_length=20)),
                ('slug', models.SlugField(max_length=200, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='NewUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=20, null=True)),
                ('last_name', models.CharField(max_length=20, null=True)),
                ('gender', models.CharField(choices=[('1', 'Male'), ('2', 'Female')], max_length=10, null=True)),
                ('dob', models.DateField(null=True)),
                ('phone_number', models.CharField(max_length=12, null=True)),
                ('nin', models.PositiveBigIntegerField(null=True)),
                ('email', models.EmailField(max_length=254, null=True)),
                ('weburl', models.URLField(max_length=40, null=True)),
                ('address', models.CharField(max_length=40, null=True)),
                ('status', models.BooleanField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.TextField(null=True)),
                ('image', models.ImageField(blank=True, upload_to='gig_images/%Y/%m/%d')),
                ('location', models.CharField(choices=[('Dar', 'Dar es Salaam'), ('arusha', 'Arusha'), ('dodoma', 'Dodoma')], max_length=20, null=True)),
                ('date', models.DateField(auto_now=True)),
                ('price', models.FloatField(max_length=25, null=True)),
                ('slug', models.SlugField(max_length=200, null=True)),
                ('status', models.CharField(choices=[('open', 'Open'), ('acquired', 'Acquired'), ('inprogress', 'In Progress'), ('Reviewing', 'Reviewing'), ('complete', 'Complete')], max_length=20, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='GigGo_App.category')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Gig',
                'verbose_name_plural': 'Gigs',
                'ordering': ['user'],
                'index_together': {('id', 'slug')},
            },
        ),
    ]
